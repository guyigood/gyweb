---
description: 
globs: 
alwaysApply: false
---
Golang Web 框架设计文档 
 
设计目标 
1. 高性能、轻量级 
2. 易于扩展和维护 
3. 遵循Go语言哲学"简单胜于复杂"
4. 提供常用Web开发功能而不臃肿 
 
核心模块设计 
 
1. 路由模块 (Router)
```go 
// 路由树节点结构 
type node struct {
    pattern  string  // 待匹配路由 
    part     string  // 路由中的一部分 
    children []*node // 子节点 
    isWild   bool    // 是否模糊匹配（包含:或*）
}
 
// 路由注册与匹配接口 
type Router interface {
    AddRoute(method string, pattern string, handler HandlerFunc)
    GetRoute(method string, path string) (*node, map[string]string)
}
```
 
功能说明：
- 支持静态路由和动态路由（如 `/user/:id`)
- 支持HTTP方法（GET/POST/PUT/DELETE等）
- 路由分组功能 
- 路由参数解析 
 
2. 上下文模块 (Context)
```go 
type Context struct {
    Writer     http.ResponseWriter 
    Request    *http.Request 
    Params     map[string]string // 路由参数 
    StatusCode int               // 响应状态码 
    handlers   []HandlerFunc     // 中间件链 
    index      int               // 当前执行到的中间件索引 
}
 
func (c *Context) JSON(code int, obj interface{}) {
    // 实现JSON响应 
}
 
func (c *Context) Next() {
    // 执行下一个中间件 
}
```
 
功能说明：
- 封装请求和响应 
- 提供便捷的JSON/HTML/Text响应方法 
- 中间件链式调用 
- 请求参数解析 
 
3. 中间件模块 (Middleware)
```go 
type HandlerFunc func(*Context)
 
// 中间件示例：日志记录 
func Logger() HandlerFunc {
    return func(c *Context) {
        start := time.Now()
        c.Next()
        log.Printf("[%d] %s in %v", c.StatusCode, c.Request.URL.Path, time.Since(start))
    }
}
```
 
功能说明：
- 支持中间件链式调用 
- 内置常用中间件（日志、恢复、CORS等）
- 支持自定义中间件 
 
4. 应用核心 (Engine)
```go 
type Engine struct {
    router *router 
    *RouterGroup // 根路由组 
    groups []*RouterGroup // 所有路由组 
}
 
func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {
    // 处理HTTP请求的核心逻辑 
}
 
func New() *Engine {
    // 初始化引擎 
}
```
 
功能说明：
- 实现`http.Handler`接口 
- 管理路由和中间件 
- 启动HTTP/HTTPS服务 
 
5. 模板渲染 (Template)
```go 
func (engine *Engine) LoadHTMLGlob(pattern string) {
    // 加载HTML模板 
}
 
func (c *Context) HTML(code int, name string, data interface{}) {
    // 渲染HTML模板 
}
```
 
功能说明：
- 支持模板预编译 
- 模板变量渲染 
- 模板继承支持 
 
快速开始示例 
 
```go 
package main 
 
import (
    "net/http"
    "github.com/yourframework"
)
 
func main() {
    r := yourframework.New()
    
    // 全局中间件 
    r.Use(yourframework.Logger())
    
    // 路由组 
    api := r.Group("/api")
    {
        api.GET("/users", listUsers)
        api.POST("/users", createUser)
    }
    
    r.Run(":8080")
}
 
func listUsers(c *yourframework.Context) {
    c.JSON(http.StatusOK, map[string]interface{}{
        "users": []string{"Alice", "Bob"},
    })
}
 
func createUser(c *yourframework.Context) {
    // 创建用户逻辑 
}
```
 
扩展功能建议 
 
1. 验证模块：提供请求参数验证 
2. ORM集成：简化数据库操作 
3. 配置管理：支持多种配置方式 
4. 测试工具：框架测试辅助工具 
5. WebSocket支持：实时通信能力 
 
性能优化考虑 
 
1. 使用`sync.Pool`重用Context对象 
2. 路由匹配算法优化（Radix树） 
3. 避免内存频繁分配 
4. 并发安全设计 

每写一个功能，就要写一个如何应用的文档在一起
 

 